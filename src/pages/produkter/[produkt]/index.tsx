import Head from 'next/head'

import { gqlShopify } from '@/pages/api/graphql'
import {
	GET_PAYMENT_METHODS,
	GET_PRODUCT,
	GET_SHOP_NAME,
} from '@/pages/api/queries'
import { parsePrice, parseWeight } from '@/utils/utils'

import layout from '@/styles/Layout.module.scss'
import styles from '@/styles/ProductPage.module.scss'
import PageHeader from '@/components/PageHeader'
import PageContent from '@/components/PageContent'
import ImageViewer from '@/components/ImageViewer'

const RecipePage = ({ shopName, product }: any) => {
	const title = `${shopName} | Produkter - ${product.title}`

	const collection = product.collections.nodes[0].handle
	const price = parsePrice(
		product.priceRange.minVariantPrice.amount,
		collection,
		product.variants.edges[0].node
	)
	const comparePrice = parsePrice(
		product.compareAtPriceRange.minVariantPrice.amount,
		collection,
		product.variants.edges[0].node
	)
	const addon = product.addonType
		? { type: product.addonType.value, text: product.addonText.value }
		: null
	const weight = parseWeight(product.variants.edges[0].node)
	console.log(product)

	return (
		<>
			<Head>
				<title>{title}</title>
				<meta name='description' content='Generated by create next app' />
			</Head>
			<div className={`${layout.container} ${layout.no_top_margin}`}>
				<div className={styles.wrapped_container}>
					<PageHeader leftAlign style={{ marginBottom: '1em' }}>
						{product.title}
					</PageHeader>
				</div>
				<div
					className={`${layout.two_column_grid} ${styles.wrapped_container}`}
				>
					<ImageViewer
						images={product.images}
						productTitle={product.title}
						addon={addon}
					/>
					<div className={styles.additional_info}>
						<div className={styles.product_price}>
							<h3>{price}</h3>
							{product.compareAtPriceRange.minVariantPrice.amount !== '0.0' ? (
								<h4>{comparePrice}</h4>
							) : null}
						</div>
						{collection !== 'paket' ? <h4>{weight}</h4> : null}
					</div>
				</div>
			</div>
			<div className={`${layout.container} ${layout.no_top_margin}`}>
				<div className={styles.wrapped_container}>asd</div>
			</div>
			<PageContent contentOnly content={product.descriptionHtml} />
		</>
	)
}

export const getServerSideProps = async (context: any) => {
	const { produkt } = context.query

	const product = await gqlShopify(GET_PRODUCT, { handle: produkt })

	const shop = await gqlShopify(GET_SHOP_NAME, {})

	const paymentMethods = await gqlShopify(GET_PAYMENT_METHODS, {})

	const gqlData = {
		shopName: shop.shop.name,
		product: product.productByHandle,
		paymentMethods: paymentMethods.shop.paymentSettings,
	}

	return {
		props: { ...gqlData },
	}
}

export default RecipePage
